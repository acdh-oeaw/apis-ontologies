"""
Autogenerated APIS models.py module
based on ../sicprod-datamodel/model.xml
"""
# pylint: disable=line-too-long too-few-public-methods
# pylint: disable=import-error import-outside-toplevel unused-import
# pylint: disable=too-many-locals too-many-statements

import reversion
from django.contrib.contenttypes.models import ContentType
from django.db import models
from apis_core.apis_entities.models import TempEntityClass
from apis_core.apis_relations.models import AbstractReification



@reversion.register(follow=["tempentityclass_ptr"])
class Person(TempEntityClass):
    """
    Person, eine Subklasse von crm:E21_Person.
    Generated from model xml
    """
    first_name = models.CharField(max_length=1024, blank=True, null=True, verbose_name = "Vorname", help_text = "Vorname der Person.")
    GENDER_CHOICES = (("männlich", "männlich"), ("weiblich", "weiblich"), ("unbekannt", "unbekannt"), )
    gender = models.CharField(max_length=9, choices=GENDER_CHOICES, blank=True, verbose_name = "Geschlecht", help_text = "Geschlecht der Person.")
    alternative_label = models.TextField(blank=True, null=True, verbose_name = "Alternativer Name", help_text = "Feld um alternative Namen anzugeben.")


@reversion.register(follow=["tempentityclass_ptr"])
class Function(TempEntityClass):
    """
    Eine Funktion kann von einer Person an einer Institution oder einem Hof ausgeübt werden kann.
    Generated from model xml
    """
    alternative_label = models.TextField(blank=True, null=True, verbose_name = "Alternativer Name", help_text = "Andere Namen für die Funktion.")


@reversion.register(follow=["tempentityclass_ptr"])
class Place(TempEntityClass):
    """
    Orte in SiCProD, Subklasse von crm:E53_Place.
    Generated from model xml
    """
    alternative_label = models.TextField(blank=True, null=True, verbose_name = "Alternativer Name", help_text = "Alternativer Name für einen Ort.")
    TYPE_CHOICES = (("Stadt", "Stadt"), ("Dorf/Nachbarschaft/Gemein/Siedlung/Weiler", "Dorf/Nachbarschaft/Gemein/Siedlung/Weiler"), ("Burg/Schloss", "Burg/Schloss"), ("Land/Herrschaftskomplex", "Land/Herrschaftskomplex"), ("Landschaft/Region", "Landschaft/Region"), ("Lehen", "Lehen"), ("Haus/Hof", "Haus/Hof"), ("Gericht", "Gericht"), ("Kloster", "Kloster"), ("Gewässer", "Gewässer"), ("Grundherrschaft", "Grundherrschaft"), ("Hofmark", "Hofmark"), ("Tal", "Tal"), ("Berg", "Berg"), ("Bergrevier", "Bergrevier"), ("Pflege", "Pflege"), ("(Land-)Vogtei", "(Land-)Vogtei"), ("Propstei", "Propstei"), )
    type = models.CharField(max_length=41, choices=TYPE_CHOICES, blank=True, verbose_name = "Typ", help_text = "Art des Ortes.")
    latitude = models.FloatField(null=True, blank=True, verbose_name = "Breitengrad", help_text = "Breitengrad des Ortes. Bei Polygonen wird die Mitte verwendet.")
    longitude = models.FloatField(null=True, blank=True, verbose_name = "Längengrad", help_text = "Längengrad des Ortes. Bei Polygonen wird die Mitte verwendet.")


@reversion.register(follow=["tempentityclass_ptr"])
class Institution(TempEntityClass):
    """
    SiCProD Institution, Subklasse von crm:E74_Group. Wird für alle Institutionen benutzt die kein Hof sind
    Generated from model xml
    """
    alternative_label = models.TextField(blank=True, null=True, verbose_name = "Alternativer Name", help_text = "Alternativer Name der Institution.")
    TYPE_CHOICES = (("Kanzlei", "Kanzlei"), ("Hofkapelle", "Hofkapelle"), ("Küche", "Küche"), ("(Dom-)Kapitel", "(Dom-)Kapitel"), ("Universität", "Universität"), ("Kloster", "Kloster"), ("Frauenzimmer", "Frauenzimmer"), ("Bistum", "Bistum"), ("Pfarrei", "Pfarrei"), )
    type = models.CharField(max_length=13, choices=TYPE_CHOICES, blank=True, verbose_name = "Typ", help_text = "Art der institution.")


@reversion.register(follow=["tempentityclass_ptr"])
class Court(TempEntityClass):
    """
    SiCProD Hof, Subklasse von crm:E74_Group. Wird für alle Institutionen benutzt die ein Hof sind
    Generated from model xml
    """
    alternative_label = models.TextField(blank=True, null=True, verbose_name = "Alternativer Name", help_text = "Alternativer Name des Hofes.")
    TYPE_CHOICES = (("Hof", "Hof"), ("Klosterhof", "Klosterhof"), ("Kaiserhof", "Kaiserhof"), ("Königshof", "Königshof"), ("Bischöflicher Hof", "Bischöflicher Hof"), ("Kurfürstlicher Hof", "Kurfürstlicher Hof"), ("Erzbischöflicher Hof", "Erzbischöflicher Hof"), ("Königlicher Hof", "Königlicher Hof"), ("Kaiserlicher Hof", "Kaiserlicher Hof"), ("Frauenzimmer", "Frauenzimmer"), )
    type = models.CharField(max_length=20, choices=TYPE_CHOICES, blank=True, verbose_name = "Typ", help_text = "Art des Hofes")


@reversion.register(follow=["tempentityclass_ptr"])
class Event(TempEntityClass):
    """
    SiCProD Ereignis, Subklasse von crm:E5_Event.
    Generated from model xml
    """
    alternative_label = models.TextField(blank=True, null=True, verbose_name = "Alternativer Name", help_text = "Alternativer Name.")
    TYPE_CHOICES = (("Hochzeit", "Hochzeit"), ("Landtag", "Landtag"), ("Fest/Turnier", "Fest/Turnier"), ("Schlacht", "Schlacht"), ("Gesandtschaft/Reise", "Gesandtschaft/Reise"), ("Taufe", "Taufe"), ("Amtseinsetzung", "Amtseinsetzung"), ("Reichstag", "Reichstag"), )
    type = models.CharField(max_length=19, choices=TYPE_CHOICES, blank=True, verbose_name = "Typ", help_text = "Typ des Ereignisses.")


@reversion.register(follow=["tempentityclass_ptr"])
class Salary(TempEntityClass):
    """
    Ein Gehalt ist die Menge an Geld die eine Person als Gegenleistung erhalten hat. Das Gehalt muss keine wiederkehrende Zahlung sein.
    Generated from model xml
    """
    TYP_CHOICES = (("Sold", "Sold"), ("Zehrung", "Zehrung"), ("Provision", "Provision"), ("Kredit", "Kredit"), ("Sonstiges", "Sonstiges"), ("Burghut", "Burghut"), ("Botenlohn", "Botenlohn"), )
    typ = models.CharField(max_length=9, choices=TYP_CHOICES, blank=True, verbose_name = "Typ", help_text = "Art des Gehalts.")
    REPETITIONTYPE_CHOICES = (("einfach", "einfach"), ("wiederholend", "wiederholend"), )
    repetitionType = models.CharField(max_length=12, choices=REPETITIONTYPE_CHOICES, blank=True, verbose_name = "Typ Wiederholungen", help_text = "Typ des Gehalts.")



# Reifications


class PersonHasLivingPlace(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonOwnsPlace(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonIsWorkingInPlace(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonPlaceOfResidence(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonHasCorrespondanceWith(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonHasFamilyRelationWith(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonIsFatherOf(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonIsBrotherOf(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonIsSonOf(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonHasMarrigeWith(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonWasPresentAtCourt(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonRecommendedPersonForCourt(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonHadBusinessRealtionshipWithPerson(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonIsCustodianOfPerson(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonWasMemberOfInstitution(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonWasActiveInInstitution(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonGetsPensionFromInstitution(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonTookPartInEvent(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonRecievedSalary(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonAuthorizedSalary(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonBornIn(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonDiedIn(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonIsServantOfPerson(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonHasHometown(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonSellsPropertyTo(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonHasDisputeWith(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonOrFunctionExecutesSalary(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonOrFunctionTakesSalary(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PersonVouchersForPerson(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class FunctionIsLocatedAtInstitution(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class FunctionIsHoldBy(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class FunctionGingHervorAus(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class FunctionIsSubordinaryOf(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class FunctionWasLocatedIn(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class PlaceLocatedInPlace(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class InstitutionPaidSalary(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class InstitutionlocatedIn(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class InstitutionGivenInMortageTo(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class InstitutionBelongsToInstitution(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class InstitutionOrdersSalary(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class EventTookPlaceAt(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class SalaryPaidTo(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")
class SalaryOrderedBy(AbstractReification):
	start_date = models.DateField(blank=True, null=True)
	start_start_date = models.DateField(blank=True, null=True)
	start_end_date = models.DateField(blank=True, null=True)
	start_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="Start")
	end_date = models.DateField(blank=True, null=True)
	end_start_date = models.DateField(blank=True, null=True)
	end_end_date = models.DateField(blank=True, null=True)
	end_date_written = models.CharField(max_length=255, blank=True, null=True, verbose_name="End")

def construct_properties():
    """
    construct properties for all the models
    based on the relations defined in the xml
    """

    from apis_core.apis_relations.models import Property


    person_has_living_place = Property.objects.get_or_create(
        name="bewohnt",
        name_reverse="Bewohner von",
    )[0]
    person_has_living_place.subj_class.clear()
    person_has_living_place.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_has_living_place.obj_class.clear()
    person_has_living_place.obj_class.add(ContentType.objects.get(model=Place.__name__))

    person_owns_place = Property.objects.get_or_create(
        name="besitzt",
        name_reverse="Besitzer von",
    )[0]
    person_owns_place.subj_class.clear()
    person_owns_place.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_owns_place.obj_class.clear()
    person_owns_place.obj_class.add(ContentType.objects.get(model=Place.__name__))

    person_is_working_in_place = Property.objects.get_or_create(
        name="ist tätig in",
        name_reverse="ist Tätigkeitsort von",
    )[0]
    person_is_working_in_place.subj_class.clear()
    person_is_working_in_place.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_is_working_in_place.obj_class.clear()
    person_is_working_in_place.obj_class.add(ContentType.objects.get(model=Place.__name__))

    person_place_of_residence = Property.objects.get_or_create(
        name="hält sich auf in",
        name_reverse="ist Aufenthaltsort von",
    )[0]
    person_place_of_residence.subj_class.clear()
    person_place_of_residence.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_place_of_residence.obj_class.clear()
    person_place_of_residence.obj_class.add(ContentType.objects.get(model=Place.__name__))

    person_has_correspondance_with = Property.objects.get_or_create(
        name="hat Korrespondenz mit",
        name_reverse="hat Korrespondenz mit",
    )[0]
    person_has_correspondance_with.subj_class.clear()
    person_has_correspondance_with.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_has_correspondance_with.obj_class.clear()
    person_has_correspondance_with.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_has_family_relation_with = Property.objects.get_or_create(
        name="hat Familienbeziehung zu",
        name_reverse="hat Familienbeziehung zu",
    )[0]
    person_has_family_relation_with.subj_class.clear()
    person_has_family_relation_with.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_has_family_relation_with.obj_class.clear()
    person_has_family_relation_with.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_is_father_of = Property.objects.get_or_create(
        name="ist Elternteil von",
        name_reverse="ist Kind von",
    )[0]
    person_is_father_of.subj_class.clear()
    person_is_father_of.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_is_father_of.obj_class.clear()
    person_is_father_of.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_is_brother_of = Property.objects.get_or_create(
        name="ist Bruder/Schwester von",
        name_reverse="ist Bruder/Schwester von",
    )[0]
    person_is_brother_of.subj_class.clear()
    person_is_brother_of.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_is_brother_of.obj_class.clear()
    person_is_brother_of.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_is_son_of = Property.objects.get_or_create(
        name="ist Kind von",
        name_reverse="ist Elternteil von",
    )[0]
    person_is_son_of.subj_class.clear()
    person_is_son_of.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_is_son_of.obj_class.clear()
    person_is_son_of.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_has_marrige_with = Property.objects.get_or_create(
        name="hat Ehe mit",
        name_reverse="hat Ehe mit",
    )[0]
    person_has_marrige_with.subj_class.clear()
    person_has_marrige_with.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_has_marrige_with.obj_class.clear()
    person_has_marrige_with.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_was_present_at_court = Property.objects.get_or_create(
        name="war anwesend bei",
        name_reverse="hatte anwesende Person",
    )[0]
    person_was_present_at_court.subj_class.clear()
    person_was_present_at_court.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_was_present_at_court.obj_class.clear()
    person_was_present_at_court.obj_class.add(ContentType.objects.get(model=Court.__name__))

    person_recommended_person_for_court = Property.objects.get_or_create(
        name="empfahl",
        name_reverse="wurde empfohlen von",
    )[0]
    person_recommended_person_for_court.subj_class.clear()
    person_recommended_person_for_court.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_recommended_person_for_court.obj_class.clear()
    person_recommended_person_for_court.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_had_business_realtionship_with_person = Property.objects.get_or_create(
        name="hat Geschäftsbeziehung zu",
        name_reverse="hat Geschäftsbeziehung zu",
    )[0]
    person_had_business_realtionship_with_person.subj_class.clear()
    person_had_business_realtionship_with_person.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_had_business_realtionship_with_person.obj_class.clear()
    person_had_business_realtionship_with_person.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_is_custodian_of_person = Property.objects.get_or_create(
        name="ist Vormund von",
        name_reverse="ist Mündel von",
    )[0]
    person_is_custodian_of_person.subj_class.clear()
    person_is_custodian_of_person.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_is_custodian_of_person.obj_class.clear()
    person_is_custodian_of_person.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_was_member_of_institution = Property.objects.get_or_create(
        name="Mitglied von",
        name_reverse="hatte Mitglied",
    )[0]
    person_was_member_of_institution.subj_class.clear()
    person_was_member_of_institution.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_was_member_of_institution.obj_class.clear()
    person_was_member_of_institution.obj_class.add(ContentType.objects.get(model=Institution.__name__))

    person_was_active_in_institution = Property.objects.get_or_create(
        name="war tätig an",
        name_reverse="hatte tätige Person",
    )[0]
    person_was_active_in_institution.subj_class.clear()
    person_was_active_in_institution.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_was_active_in_institution.obj_class.clear()
    person_was_active_in_institution.obj_class.add(ContentType.objects.get(model=Institution.__name__))

    person_gets_pension_from_institution = Property.objects.get_or_create(
        name="ist Pfründner von",
        name_reverse="hat Pfründner",
    )[0]
    person_gets_pension_from_institution.subj_class.clear()
    person_gets_pension_from_institution.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_gets_pension_from_institution.obj_class.clear()
    person_gets_pension_from_institution.obj_class.add(ContentType.objects.get(model=Institution.__name__))

    person_took_part_in_event = Property.objects.get_or_create(
        name="nahm teil an",
        name_reverse="hatte teilnehmende Person",
    )[0]
    person_took_part_in_event.subj_class.clear()
    person_took_part_in_event.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_took_part_in_event.obj_class.clear()
    person_took_part_in_event.obj_class.add(ContentType.objects.get(model=Event.__name__))

    person_recieved_salary = Property.objects.get_or_create(
        name="erhielt Gehalt",
        name_reverse="wurde ausbezahlt an",
    )[0]
    person_recieved_salary.subj_class.clear()
    person_recieved_salary.subj_class.add(ContentType.objects.get(model=Salary.__name__))
    person_recieved_salary.obj_class.clear()
    person_recieved_salary.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_authorized_salary = Property.objects.get_or_create(
        name="weist an",
        name_reverse="auf Anweisung von",
    )[0]
    person_authorized_salary.subj_class.clear()
    person_authorized_salary.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_authorized_salary.obj_class.clear()
    person_authorized_salary.obj_class.add(ContentType.objects.get(model=Salary.__name__))

    person_born_in = Property.objects.get_or_create(
        name="geboren in",
        name_reverse="Geburtsort von",
    )[0]
    person_born_in.subj_class.clear()
    person_born_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_born_in.obj_class.clear()
    person_born_in.obj_class.add(ContentType.objects.get(model=Place.__name__))

    person_died_in = Property.objects.get_or_create(
        name="gestorben in",
        name_reverse="Sterbeort von",
    )[0]
    person_died_in.subj_class.clear()
    person_died_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_died_in.obj_class.clear()
    person_died_in.obj_class.add(ContentType.objects.get(model=Place.__name__))

    person_is_servant_of_person = Property.objects.get_or_create(
        name="ist im Dienst von",
        name_reverse="hat Diener",
    )[0]
    person_is_servant_of_person.subj_class.clear()
    person_is_servant_of_person.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_is_servant_of_person.obj_class.clear()
    person_is_servant_of_person.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_has_hometown = Property.objects.get_or_create(
        name="hat Heimatort in",
        name_reverse="Heimatort von",
    )[0]
    person_has_hometown.subj_class.clear()
    person_has_hometown.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_has_hometown.obj_class.clear()
    person_has_hometown.obj_class.add(ContentType.objects.get(model=Place.__name__))

    person_sells_property_to = Property.objects.get_or_create(
        name="verkauft Besitz an",
        name_reverse="kauft Besitz von",
    )[0]
    person_sells_property_to.subj_class.clear()
    person_sells_property_to.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_sells_property_to.obj_class.clear()
    person_sells_property_to.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_has_dispute_with = Property.objects.get_or_create(
        name="hat Streit mit",
        name_reverse="hat Streit mit",
    )[0]
    person_has_dispute_with.subj_class.clear()
    person_has_dispute_with.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_has_dispute_with.obj_class.clear()
    person_has_dispute_with.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_or_function_executes_salary = Property.objects.get_or_create(
        name="führt durch",
        name_reverse="wird durchgeführt von",
    )[0]
    person_or_function_executes_salary.subj_class.clear()
    person_or_function_executes_salary.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_or_function_executes_salary.subj_class.add(ContentType.objects.get(model=Function.__name__))
    person_or_function_executes_salary.obj_class.clear()
    person_or_function_executes_salary.obj_class.add(ContentType.objects.get(model=Salary.__name__))

    person_or_function_takes_salary = Property.objects.get_or_create(
        name="nimmt entgegen",
        name_reverse="wird entgegengenommen von",
    )[0]
    person_or_function_takes_salary.subj_class.clear()
    person_or_function_takes_salary.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_or_function_takes_salary.subj_class.add(ContentType.objects.get(model=Function.__name__))
    person_or_function_takes_salary.obj_class.clear()
    person_or_function_takes_salary.obj_class.add(ContentType.objects.get(model=Salary.__name__))

    person_vouchers_for_person = Property.objects.get_or_create(
        name="bürgt für",
        name_reverse="wird gebürgt von",
    )[0]
    person_vouchers_for_person.subj_class.clear()
    person_vouchers_for_person.subj_class.add(ContentType.objects.get(model=Person.__name__))
    person_vouchers_for_person.obj_class.clear()
    person_vouchers_for_person.obj_class.add(ContentType.objects.get(model=Person.__name__))

    function_is_located_at_institution = Property.objects.get_or_create(
        name="ist an",
        name_reverse="hat Funktion",
    )[0]
    function_is_located_at_institution.subj_class.clear()
    function_is_located_at_institution.subj_class.add(ContentType.objects.get(model=Function.__name__))
    function_is_located_at_institution.obj_class.clear()
    function_is_located_at_institution.obj_class.add(ContentType.objects.get(model=Institution.__name__))

    function_is_located_at_institution.obj_class.add(ContentType.objects.get(model=Court.__name__))

    function_is_hold_by = Property.objects.get_or_create(
        name="wird bekleidet von",
        name_reverse="hat Funktion inne",
    )[0]
    function_is_hold_by.subj_class.clear()
    function_is_hold_by.subj_class.add(ContentType.objects.get(model=Function.__name__))
    function_is_hold_by.obj_class.clear()
    function_is_hold_by.obj_class.add(ContentType.objects.get(model=Person.__name__))

    function_ging_hervor_aus = Property.objects.get_or_create(
        name="ging hervor aus",
        name_reverse="war Vorgänger von",
    )[0]
    function_ging_hervor_aus.subj_class.clear()
    function_ging_hervor_aus.subj_class.add(ContentType.objects.get(model=Function.__name__))
    function_ging_hervor_aus.obj_class.clear()
    function_ging_hervor_aus.obj_class.add(ContentType.objects.get(model=Function.__name__))

    function_is_subordinary_of = Property.objects.get_or_create(
        name="ist untergeordnet",
        name_reverse="hat untergeordnete Funktion",
    )[0]
    function_is_subordinary_of.subj_class.clear()
    function_is_subordinary_of.subj_class.add(ContentType.objects.get(model=Function.__name__))
    function_is_subordinary_of.obj_class.clear()
    function_is_subordinary_of.obj_class.add(ContentType.objects.get(model=Function.__name__))

    function_was_located_in = Property.objects.get_or_create(
        name="ausgeübt in",
        name_reverse="war Ausübungsort von",
    )[0]
    function_was_located_in.subj_class.clear()
    function_was_located_in.subj_class.add(ContentType.objects.get(model=Function.__name__))
    function_was_located_in.obj_class.clear()
    function_was_located_in.obj_class.add(ContentType.objects.get(model=Place.__name__))

    place_located_in_place = Property.objects.get_or_create(
        name="Teil von",
        name_reverse="hat Teil",
    )[0]
    place_located_in_place.subj_class.clear()
    place_located_in_place.subj_class.add(ContentType.objects.get(model=Place.__name__))
    place_located_in_place.obj_class.clear()
    place_located_in_place.obj_class.add(ContentType.objects.get(model=Place.__name__))

    institution_paid_salary = Property.objects.get_or_create(
        name="zahlte aus",
        name_reverse="wurde ausbezahlt von",
    )[0]
    institution_paid_salary.subj_class.clear()
    institution_paid_salary.subj_class.add(ContentType.objects.get(model=Institution.__name__))
    institution_paid_salary.obj_class.clear()
    institution_paid_salary.obj_class.add(ContentType.objects.get(model=Salary.__name__))

    institutionlocated_in = Property.objects.get_or_create(
        name="ist gelegen in",
        name_reverse="inkludiert",
    )[0]
    institutionlocated_in.subj_class.clear()
    institutionlocated_in.subj_class.add(ContentType.objects.get(model=Institution.__name__))
    institutionlocated_in.obj_class.clear()
    institutionlocated_in.obj_class.add(ContentType.objects.get(model=Place.__name__))

    institution_given_in_mortage_to = Property.objects.get_or_create(
        name="ist verpfändet an",
        name_reverse="hat als Pfand",
    )[0]
    institution_given_in_mortage_to.subj_class.clear()
    institution_given_in_mortage_to.subj_class.add(ContentType.objects.get(model=Institution.__name__))
    institution_given_in_mortage_to.obj_class.clear()
    institution_given_in_mortage_to.obj_class.add(ContentType.objects.get(model=Person.__name__))

    institution_belongs_to_institution = Property.objects.get_or_create(
        name="gehört zu",
        name_reverse="zuständig für",
    )[0]
    institution_belongs_to_institution.subj_class.clear()
    institution_belongs_to_institution.subj_class.add(ContentType.objects.get(model=Institution.__name__))
    institution_belongs_to_institution.obj_class.clear()
    institution_belongs_to_institution.obj_class.add(ContentType.objects.get(model=Institution.__name__))

    institution_orders_salary = Property.objects.get_or_create(
        name="weist an",
        name_reverse="angewiesen von",
    )[0]
    institution_orders_salary.subj_class.clear()
    institution_orders_salary.subj_class.add(ContentType.objects.get(model=Institution.__name__))
    institution_orders_salary.obj_class.clear()
    institution_orders_salary.obj_class.add(ContentType.objects.get(model=Salary.__name__))

    event_took_place_at = Property.objects.get_or_create(
        name="fand statt in",
        name_reverse="inkludierte",
    )[0]
    event_took_place_at.subj_class.clear()
    event_took_place_at.subj_class.add(ContentType.objects.get(model=Event.__name__))
    event_took_place_at.obj_class.clear()
    event_took_place_at.obj_class.add(ContentType.objects.get(model=Place.__name__))

    salary_paid_to = Property.objects.get_or_create(
        name="wurde ausbezahlt an",
        name_reverse="erhielt",
    )[0]
    salary_paid_to.subj_class.clear()
    salary_paid_to.subj_class.add(ContentType.objects.get(model=Salary.__name__))
    salary_paid_to.obj_class.clear()
    salary_paid_to.obj_class.add(ContentType.objects.get(model=Function.__name__))

    salary_ordered_by = Property.objects.get_or_create(
        name="auf Anweisung von",
        name_reverse="wies an",
    )[0]
    salary_ordered_by.subj_class.clear()
    salary_ordered_by.subj_class.add(ContentType.objects.get(model=Salary.__name__))
    salary_ordered_by.obj_class.clear()
    salary_ordered_by.obj_class.add(ContentType.objects.get(model=Function.__name__))


# Reification properties


    person_has_living_place_in = Property.objects.get_or_create(
        name="person bewohnt",
        name_reverse="Bewohner von person",
    )[0]
    #person_has_living_place_in.subj_class.clear()
    person_has_living_place_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_has_living_place_in.obj_class.clear()
    person_has_living_place_in.obj_class.add(ContentType.objects.get(model=PersonHasLivingPlace.__name__))
    person_has_living_place_out = Property.objects.get_or_create(
        name="bewohnt place",
        name_reverse="place Bewohner von",
    )[0]
    #person_has_living_place_out.subj_class.clear()
    person_has_living_place_out.subj_class.add(ContentType.objects.get(model=PersonHasLivingPlace.__name__))
    #person_has_living_place_out.obj_class.clear()
    person_has_living_place_out.obj_class.add(ContentType.objects.get(model=Place.__name__))

    person_owns_place_in = Property.objects.get_or_create(
        name="person besitzt",
        name_reverse="Besitzer von person",
    )[0]
    #person_owns_place_in.subj_class.clear()
    person_owns_place_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_owns_place_in.obj_class.clear()
    person_owns_place_in.obj_class.add(ContentType.objects.get(model=PersonOwnsPlace.__name__))
    person_owns_place_out = Property.objects.get_or_create(
        name="besitzt place",
        name_reverse="place Besitzer von",
    )[0]
    #person_owns_place_out.subj_class.clear()
    person_owns_place_out.subj_class.add(ContentType.objects.get(model=PersonOwnsPlace.__name__))
    #person_owns_place_out.obj_class.clear()
    person_owns_place_out.obj_class.add(ContentType.objects.get(model=Place.__name__))

    person_is_working_in_place_in = Property.objects.get_or_create(
        name="person ist tätig in",
        name_reverse="ist Tätigkeitsort von person",
    )[0]
    #person_is_working_in_place_in.subj_class.clear()
    person_is_working_in_place_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_is_working_in_place_in.obj_class.clear()
    person_is_working_in_place_in.obj_class.add(ContentType.objects.get(model=PersonIsWorkingInPlace.__name__))
    person_is_working_in_place_out = Property.objects.get_or_create(
        name="ist tätig in place",
        name_reverse="place ist Tätigkeitsort von",
    )[0]
    #person_is_working_in_place_out.subj_class.clear()
    person_is_working_in_place_out.subj_class.add(ContentType.objects.get(model=PersonIsWorkingInPlace.__name__))
    #person_is_working_in_place_out.obj_class.clear()
    person_is_working_in_place_out.obj_class.add(ContentType.objects.get(model=Place.__name__))

    person_place_of_residence_in = Property.objects.get_or_create(
        name="person hält sich auf in",
        name_reverse="ist Aufenthaltsort von person",
    )[0]
    #person_place_of_residence_in.subj_class.clear()
    person_place_of_residence_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_place_of_residence_in.obj_class.clear()
    person_place_of_residence_in.obj_class.add(ContentType.objects.get(model=PersonPlaceOfResidence.__name__))
    person_place_of_residence_out = Property.objects.get_or_create(
        name="hält sich auf in place",
        name_reverse="place ist Aufenthaltsort von",
    )[0]
    #person_place_of_residence_out.subj_class.clear()
    person_place_of_residence_out.subj_class.add(ContentType.objects.get(model=PersonPlaceOfResidence.__name__))
    #person_place_of_residence_out.obj_class.clear()
    person_place_of_residence_out.obj_class.add(ContentType.objects.get(model=Place.__name__))

    person_has_correspondance_with_in = Property.objects.get_or_create(
        name="person hat Korrespondenz mit",
        name_reverse="hat Korrespondenz mit person",
    )[0]
    #person_has_correspondance_with_in.subj_class.clear()
    person_has_correspondance_with_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_has_correspondance_with_in.obj_class.clear()
    person_has_correspondance_with_in.obj_class.add(ContentType.objects.get(model=PersonHasCorrespondanceWith.__name__))
    person_has_correspondance_with_out = Property.objects.get_or_create(
        name="hat Korrespondenz mit person",
        name_reverse="person hat Korrespondenz mit",
    )[0]
    #person_has_correspondance_with_out.subj_class.clear()
    person_has_correspondance_with_out.subj_class.add(ContentType.objects.get(model=PersonHasCorrespondanceWith.__name__))
    #person_has_correspondance_with_out.obj_class.clear()
    person_has_correspondance_with_out.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_has_family_relation_with_in = Property.objects.get_or_create(
        name="person hat Familienbeziehung zu",
        name_reverse="hat Familienbeziehung zu person",
    )[0]
    #person_has_family_relation_with_in.subj_class.clear()
    person_has_family_relation_with_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_has_family_relation_with_in.obj_class.clear()
    person_has_family_relation_with_in.obj_class.add(ContentType.objects.get(model=PersonHasFamilyRelationWith.__name__))
    person_has_family_relation_with_out = Property.objects.get_or_create(
        name="hat Familienbeziehung zu person",
        name_reverse="person hat Familienbeziehung zu",
    )[0]
    #person_has_family_relation_with_out.subj_class.clear()
    person_has_family_relation_with_out.subj_class.add(ContentType.objects.get(model=PersonHasFamilyRelationWith.__name__))
    #person_has_family_relation_with_out.obj_class.clear()
    person_has_family_relation_with_out.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_is_father_of_in = Property.objects.get_or_create(
        name="person ist Elternteil von",
        name_reverse="ist Kind von person",
    )[0]
    #person_is_father_of_in.subj_class.clear()
    person_is_father_of_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_is_father_of_in.obj_class.clear()
    person_is_father_of_in.obj_class.add(ContentType.objects.get(model=PersonIsFatherOf.__name__))
    person_is_father_of_out = Property.objects.get_or_create(
        name="ist Elternteil von person",
        name_reverse="person ist Kind von",
    )[0]
    #person_is_father_of_out.subj_class.clear()
    person_is_father_of_out.subj_class.add(ContentType.objects.get(model=PersonIsFatherOf.__name__))
    #person_is_father_of_out.obj_class.clear()
    person_is_father_of_out.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_is_brother_of_in = Property.objects.get_or_create(
        name="person ist Bruder/Schwester von",
        name_reverse="ist Bruder/Schwester von person",
    )[0]
    #person_is_brother_of_in.subj_class.clear()
    person_is_brother_of_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_is_brother_of_in.obj_class.clear()
    person_is_brother_of_in.obj_class.add(ContentType.objects.get(model=PersonIsBrotherOf.__name__))
    person_is_brother_of_out = Property.objects.get_or_create(
        name="ist Bruder/Schwester von person",
        name_reverse="person ist Bruder/Schwester von",
    )[0]
    #person_is_brother_of_out.subj_class.clear()
    person_is_brother_of_out.subj_class.add(ContentType.objects.get(model=PersonIsBrotherOf.__name__))
    #person_is_brother_of_out.obj_class.clear()
    person_is_brother_of_out.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_is_son_of_in = Property.objects.get_or_create(
        name="person ist Kind von",
        name_reverse="ist Elternteil von person",
    )[0]
    #person_is_son_of_in.subj_class.clear()
    person_is_son_of_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_is_son_of_in.obj_class.clear()
    person_is_son_of_in.obj_class.add(ContentType.objects.get(model=PersonIsSonOf.__name__))
    person_is_son_of_out = Property.objects.get_or_create(
        name="ist Kind von person",
        name_reverse="person ist Elternteil von",
    )[0]
    #person_is_son_of_out.subj_class.clear()
    person_is_son_of_out.subj_class.add(ContentType.objects.get(model=PersonIsSonOf.__name__))
    #person_is_son_of_out.obj_class.clear()
    person_is_son_of_out.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_has_marrige_with_in = Property.objects.get_or_create(
        name="person hat Ehe mit",
        name_reverse="hat Ehe mit person",
    )[0]
    #person_has_marrige_with_in.subj_class.clear()
    person_has_marrige_with_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_has_marrige_with_in.obj_class.clear()
    person_has_marrige_with_in.obj_class.add(ContentType.objects.get(model=PersonHasMarrigeWith.__name__))
    person_has_marrige_with_out = Property.objects.get_or_create(
        name="hat Ehe mit person",
        name_reverse="person hat Ehe mit",
    )[0]
    #person_has_marrige_with_out.subj_class.clear()
    person_has_marrige_with_out.subj_class.add(ContentType.objects.get(model=PersonHasMarrigeWith.__name__))
    #person_has_marrige_with_out.obj_class.clear()
    person_has_marrige_with_out.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_was_present_at_court_in = Property.objects.get_or_create(
        name="person war anwesend bei",
        name_reverse="hatte anwesende Person person",
    )[0]
    #person_was_present_at_court_in.subj_class.clear()
    person_was_present_at_court_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_was_present_at_court_in.obj_class.clear()
    person_was_present_at_court_in.obj_class.add(ContentType.objects.get(model=PersonWasPresentAtCourt.__name__))
    person_was_present_at_court_out = Property.objects.get_or_create(
        name="war anwesend bei court",
        name_reverse="court hatte anwesende Person",
    )[0]
    #person_was_present_at_court_out.subj_class.clear()
    person_was_present_at_court_out.subj_class.add(ContentType.objects.get(model=PersonWasPresentAtCourt.__name__))
    #person_was_present_at_court_out.obj_class.clear()
    person_was_present_at_court_out.obj_class.add(ContentType.objects.get(model=Court.__name__))

    person_recommended_person_for_court_in = Property.objects.get_or_create(
        name="person empfahl",
        name_reverse="wurde empfohlen von person",
    )[0]
    #person_recommended_person_for_court_in.subj_class.clear()
    person_recommended_person_for_court_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_recommended_person_for_court_in.obj_class.clear()
    person_recommended_person_for_court_in.obj_class.add(ContentType.objects.get(model=PersonRecommendedPersonForCourt.__name__))
    person_recommended_person_for_court_out = Property.objects.get_or_create(
        name="empfahl person",
        name_reverse="person wurde empfohlen von",
    )[0]
    #person_recommended_person_for_court_out.subj_class.clear()
    person_recommended_person_for_court_out.subj_class.add(ContentType.objects.get(model=PersonRecommendedPersonForCourt.__name__))
    #person_recommended_person_for_court_out.obj_class.clear()
    person_recommended_person_for_court_out.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_had_business_realtionship_with_person_in = Property.objects.get_or_create(
        name="person hat Geschäftsbeziehung zu",
        name_reverse="hat Geschäftsbeziehung zu person",
    )[0]
    #person_had_business_realtionship_with_person_in.subj_class.clear()
    person_had_business_realtionship_with_person_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_had_business_realtionship_with_person_in.obj_class.clear()
    person_had_business_realtionship_with_person_in.obj_class.add(ContentType.objects.get(model=PersonHadBusinessRealtionshipWithPerson.__name__))
    person_had_business_realtionship_with_person_out = Property.objects.get_or_create(
        name="hat Geschäftsbeziehung zu person",
        name_reverse="person hat Geschäftsbeziehung zu",
    )[0]
    #person_had_business_realtionship_with_person_out.subj_class.clear()
    person_had_business_realtionship_with_person_out.subj_class.add(ContentType.objects.get(model=PersonHadBusinessRealtionshipWithPerson.__name__))
    #person_had_business_realtionship_with_person_out.obj_class.clear()
    person_had_business_realtionship_with_person_out.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_is_custodian_of_person_in = Property.objects.get_or_create(
        name="person ist Vormund von",
        name_reverse="ist Mündel von person",
    )[0]
    #person_is_custodian_of_person_in.subj_class.clear()
    person_is_custodian_of_person_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_is_custodian_of_person_in.obj_class.clear()
    person_is_custodian_of_person_in.obj_class.add(ContentType.objects.get(model=PersonIsCustodianOfPerson.__name__))
    person_is_custodian_of_person_out = Property.objects.get_or_create(
        name="ist Vormund von person",
        name_reverse="person ist Mündel von",
    )[0]
    #person_is_custodian_of_person_out.subj_class.clear()
    person_is_custodian_of_person_out.subj_class.add(ContentType.objects.get(model=PersonIsCustodianOfPerson.__name__))
    #person_is_custodian_of_person_out.obj_class.clear()
    person_is_custodian_of_person_out.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_was_member_of_institution_in = Property.objects.get_or_create(
        name="person Mitglied von",
        name_reverse="hatte Mitglied person",
    )[0]
    #person_was_member_of_institution_in.subj_class.clear()
    person_was_member_of_institution_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_was_member_of_institution_in.obj_class.clear()
    person_was_member_of_institution_in.obj_class.add(ContentType.objects.get(model=PersonWasMemberOfInstitution.__name__))
    person_was_member_of_institution_out = Property.objects.get_or_create(
        name="Mitglied von institution",
        name_reverse="institution hatte Mitglied",
    )[0]
    #person_was_member_of_institution_out.subj_class.clear()
    person_was_member_of_institution_out.subj_class.add(ContentType.objects.get(model=PersonWasMemberOfInstitution.__name__))
    #person_was_member_of_institution_out.obj_class.clear()
    person_was_member_of_institution_out.obj_class.add(ContentType.objects.get(model=Institution.__name__))

    person_was_active_in_institution_in = Property.objects.get_or_create(
        name="person war tätig an",
        name_reverse="hatte tätige Person person",
    )[0]
    #person_was_active_in_institution_in.subj_class.clear()
    person_was_active_in_institution_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_was_active_in_institution_in.obj_class.clear()
    person_was_active_in_institution_in.obj_class.add(ContentType.objects.get(model=PersonWasActiveInInstitution.__name__))
    person_was_active_in_institution_out = Property.objects.get_or_create(
        name="war tätig an institution",
        name_reverse="institution hatte tätige Person",
    )[0]
    #person_was_active_in_institution_out.subj_class.clear()
    person_was_active_in_institution_out.subj_class.add(ContentType.objects.get(model=PersonWasActiveInInstitution.__name__))
    #person_was_active_in_institution_out.obj_class.clear()
    person_was_active_in_institution_out.obj_class.add(ContentType.objects.get(model=Institution.__name__))

    person_gets_pension_from_institution_in = Property.objects.get_or_create(
        name="person ist Pfründner von",
        name_reverse="hat Pfründner person",
    )[0]
    #person_gets_pension_from_institution_in.subj_class.clear()
    person_gets_pension_from_institution_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_gets_pension_from_institution_in.obj_class.clear()
    person_gets_pension_from_institution_in.obj_class.add(ContentType.objects.get(model=PersonGetsPensionFromInstitution.__name__))
    person_gets_pension_from_institution_out = Property.objects.get_or_create(
        name="ist Pfründner von institution",
        name_reverse="institution hat Pfründner",
    )[0]
    #person_gets_pension_from_institution_out.subj_class.clear()
    person_gets_pension_from_institution_out.subj_class.add(ContentType.objects.get(model=PersonGetsPensionFromInstitution.__name__))
    #person_gets_pension_from_institution_out.obj_class.clear()
    person_gets_pension_from_institution_out.obj_class.add(ContentType.objects.get(model=Institution.__name__))

    person_took_part_in_event_in = Property.objects.get_or_create(
        name="person nahm teil an",
        name_reverse="hatte teilnehmende Person person",
    )[0]
    #person_took_part_in_event_in.subj_class.clear()
    person_took_part_in_event_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_took_part_in_event_in.obj_class.clear()
    person_took_part_in_event_in.obj_class.add(ContentType.objects.get(model=PersonTookPartInEvent.__name__))
    person_took_part_in_event_out = Property.objects.get_or_create(
        name="nahm teil an event",
        name_reverse="event hatte teilnehmende Person",
    )[0]
    #person_took_part_in_event_out.subj_class.clear()
    person_took_part_in_event_out.subj_class.add(ContentType.objects.get(model=PersonTookPartInEvent.__name__))
    #person_took_part_in_event_out.obj_class.clear()
    person_took_part_in_event_out.obj_class.add(ContentType.objects.get(model=Event.__name__))

    person_recieved_salary_in = Property.objects.get_or_create(
        name="salary erhielt Gehalt",
        name_reverse="wurde ausbezahlt an salary",
    )[0]
    #person_recieved_salary_in.subj_class.clear()
    person_recieved_salary_in.subj_class.add(ContentType.objects.get(model=Salary.__name__))
    #person_recieved_salary_in.obj_class.clear()
    person_recieved_salary_in.obj_class.add(ContentType.objects.get(model=PersonRecievedSalary.__name__))
    person_recieved_salary_out = Property.objects.get_or_create(
        name="erhielt Gehalt person",
        name_reverse="person wurde ausbezahlt an",
    )[0]
    #person_recieved_salary_out.subj_class.clear()
    person_recieved_salary_out.subj_class.add(ContentType.objects.get(model=PersonRecievedSalary.__name__))
    #person_recieved_salary_out.obj_class.clear()
    person_recieved_salary_out.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_authorized_salary_in = Property.objects.get_or_create(
        name="person weist an",
        name_reverse="auf Anweisung von person",
    )[0]
    #person_authorized_salary_in.subj_class.clear()
    person_authorized_salary_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_authorized_salary_in.obj_class.clear()
    person_authorized_salary_in.obj_class.add(ContentType.objects.get(model=PersonAuthorizedSalary.__name__))
    person_authorized_salary_out = Property.objects.get_or_create(
        name="weist an salary",
        name_reverse="salary auf Anweisung von",
    )[0]
    #person_authorized_salary_out.subj_class.clear()
    person_authorized_salary_out.subj_class.add(ContentType.objects.get(model=PersonAuthorizedSalary.__name__))
    #person_authorized_salary_out.obj_class.clear()
    person_authorized_salary_out.obj_class.add(ContentType.objects.get(model=Salary.__name__))

    person_born_in_in = Property.objects.get_or_create(
        name="person geboren in",
        name_reverse="Geburtsort von person",
    )[0]
    #person_born_in_in.subj_class.clear()
    person_born_in_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_born_in_in.obj_class.clear()
    person_born_in_in.obj_class.add(ContentType.objects.get(model=PersonBornIn.__name__))
    person_born_in_out = Property.objects.get_or_create(
        name="geboren in place",
        name_reverse="place Geburtsort von",
    )[0]
    #person_born_in_out.subj_class.clear()
    person_born_in_out.subj_class.add(ContentType.objects.get(model=PersonBornIn.__name__))
    #person_born_in_out.obj_class.clear()
    person_born_in_out.obj_class.add(ContentType.objects.get(model=Place.__name__))

    person_died_in_in = Property.objects.get_or_create(
        name="person gestorben in",
        name_reverse="Sterbeort von person",
    )[0]
    #person_died_in_in.subj_class.clear()
    person_died_in_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_died_in_in.obj_class.clear()
    person_died_in_in.obj_class.add(ContentType.objects.get(model=PersonDiedIn.__name__))
    person_died_in_out = Property.objects.get_or_create(
        name="gestorben in place",
        name_reverse="place Sterbeort von",
    )[0]
    #person_died_in_out.subj_class.clear()
    person_died_in_out.subj_class.add(ContentType.objects.get(model=PersonDiedIn.__name__))
    #person_died_in_out.obj_class.clear()
    person_died_in_out.obj_class.add(ContentType.objects.get(model=Place.__name__))

    person_is_servant_of_person_in = Property.objects.get_or_create(
        name="person ist im Dienst von",
        name_reverse="hat Diener person",
    )[0]
    #person_is_servant_of_person_in.subj_class.clear()
    person_is_servant_of_person_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_is_servant_of_person_in.obj_class.clear()
    person_is_servant_of_person_in.obj_class.add(ContentType.objects.get(model=PersonIsServantOfPerson.__name__))
    person_is_servant_of_person_out = Property.objects.get_or_create(
        name="ist im Dienst von person",
        name_reverse="person hat Diener",
    )[0]
    #person_is_servant_of_person_out.subj_class.clear()
    person_is_servant_of_person_out.subj_class.add(ContentType.objects.get(model=PersonIsServantOfPerson.__name__))
    #person_is_servant_of_person_out.obj_class.clear()
    person_is_servant_of_person_out.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_has_hometown_in = Property.objects.get_or_create(
        name="person hat Heimatort in",
        name_reverse="Heimatort von person",
    )[0]
    #person_has_hometown_in.subj_class.clear()
    person_has_hometown_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_has_hometown_in.obj_class.clear()
    person_has_hometown_in.obj_class.add(ContentType.objects.get(model=PersonHasHometown.__name__))
    person_has_hometown_out = Property.objects.get_or_create(
        name="hat Heimatort in place",
        name_reverse="place Heimatort von",
    )[0]
    #person_has_hometown_out.subj_class.clear()
    person_has_hometown_out.subj_class.add(ContentType.objects.get(model=PersonHasHometown.__name__))
    #person_has_hometown_out.obj_class.clear()
    person_has_hometown_out.obj_class.add(ContentType.objects.get(model=Place.__name__))

    person_sells_property_to_in = Property.objects.get_or_create(
        name="person verkauft Besitz an",
        name_reverse="kauft Besitz von person",
    )[0]
    #person_sells_property_to_in.subj_class.clear()
    person_sells_property_to_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_sells_property_to_in.obj_class.clear()
    person_sells_property_to_in.obj_class.add(ContentType.objects.get(model=PersonSellsPropertyTo.__name__))
    person_sells_property_to_out = Property.objects.get_or_create(
        name="verkauft Besitz an person",
        name_reverse="person kauft Besitz von",
    )[0]
    #person_sells_property_to_out.subj_class.clear()
    person_sells_property_to_out.subj_class.add(ContentType.objects.get(model=PersonSellsPropertyTo.__name__))
    #person_sells_property_to_out.obj_class.clear()
    person_sells_property_to_out.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_has_dispute_with_in = Property.objects.get_or_create(
        name="person hat Streit mit",
        name_reverse="hat Streit mit person",
    )[0]
    #person_has_dispute_with_in.subj_class.clear()
    person_has_dispute_with_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_has_dispute_with_in.obj_class.clear()
    person_has_dispute_with_in.obj_class.add(ContentType.objects.get(model=PersonHasDisputeWith.__name__))
    person_has_dispute_with_out = Property.objects.get_or_create(
        name="hat Streit mit person",
        name_reverse="person hat Streit mit",
    )[0]
    #person_has_dispute_with_out.subj_class.clear()
    person_has_dispute_with_out.subj_class.add(ContentType.objects.get(model=PersonHasDisputeWith.__name__))
    #person_has_dispute_with_out.obj_class.clear()
    person_has_dispute_with_out.obj_class.add(ContentType.objects.get(model=Person.__name__))

    person_or_function_executes_salary_in = Property.objects.get_or_create(
        name="person führt durch",
        name_reverse="wird durchgeführt von person",
    )[0]
    #person_or_function_executes_salary_in.subj_class.clear()
    person_or_function_executes_salary_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_or_function_executes_salary_in.obj_class.clear()
    person_or_function_executes_salary_in.obj_class.add(ContentType.objects.get(model=PersonOrFunctionExecutesSalary.__name__))
    person_or_function_executes_salary_in = Property.objects.get_or_create(
        name="function führt durch",
        name_reverse="wird durchgeführt von function",
    )[0]
    #person_or_function_executes_salary_in.subj_class.clear()
    person_or_function_executes_salary_in.subj_class.add(ContentType.objects.get(model=Function.__name__))
    #person_or_function_executes_salary_in.obj_class.clear()
    person_or_function_executes_salary_in.obj_class.add(ContentType.objects.get(model=PersonOrFunctionExecutesSalary.__name__))
    person_or_function_executes_salary_out = Property.objects.get_or_create(
        name="führt durch salary",
        name_reverse="salary wird durchgeführt von",
    )[0]
    #person_or_function_executes_salary_out.subj_class.clear()
    person_or_function_executes_salary_out.subj_class.add(ContentType.objects.get(model=PersonOrFunctionExecutesSalary.__name__))
    person_or_function_executes_salary_out.subj_class.add(ContentType.objects.get(model=PersonOrFunctionExecutesSalary.__name__))
    #person_or_function_executes_salary_out.obj_class.clear()
    person_or_function_executes_salary_out.obj_class.add(ContentType.objects.get(model=Salary.__name__))

    person_or_function_takes_salary_in = Property.objects.get_or_create(
        name="person nimmt entgegen",
        name_reverse="wird entgegengenommen von person",
    )[0]
    #person_or_function_takes_salary_in.subj_class.clear()
    person_or_function_takes_salary_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_or_function_takes_salary_in.obj_class.clear()
    person_or_function_takes_salary_in.obj_class.add(ContentType.objects.get(model=PersonOrFunctionTakesSalary.__name__))
    person_or_function_takes_salary_in = Property.objects.get_or_create(
        name="function nimmt entgegen",
        name_reverse="wird entgegengenommen von function",
    )[0]
    #person_or_function_takes_salary_in.subj_class.clear()
    person_or_function_takes_salary_in.subj_class.add(ContentType.objects.get(model=Function.__name__))
    #person_or_function_takes_salary_in.obj_class.clear()
    person_or_function_takes_salary_in.obj_class.add(ContentType.objects.get(model=PersonOrFunctionTakesSalary.__name__))
    person_or_function_takes_salary_out = Property.objects.get_or_create(
        name="nimmt entgegen salary",
        name_reverse="salary wird entgegengenommen von",
    )[0]
    #person_or_function_takes_salary_out.subj_class.clear()
    person_or_function_takes_salary_out.subj_class.add(ContentType.objects.get(model=PersonOrFunctionTakesSalary.__name__))
    person_or_function_takes_salary_out.subj_class.add(ContentType.objects.get(model=PersonOrFunctionTakesSalary.__name__))
    #person_or_function_takes_salary_out.obj_class.clear()
    person_or_function_takes_salary_out.obj_class.add(ContentType.objects.get(model=Salary.__name__))

    person_vouchers_for_person_in = Property.objects.get_or_create(
        name="person bürgt für",
        name_reverse="wird gebürgt von person",
    )[0]
    #person_vouchers_for_person_in.subj_class.clear()
    person_vouchers_for_person_in.subj_class.add(ContentType.objects.get(model=Person.__name__))
    #person_vouchers_for_person_in.obj_class.clear()
    person_vouchers_for_person_in.obj_class.add(ContentType.objects.get(model=PersonVouchersForPerson.__name__))
    person_vouchers_for_person_out = Property.objects.get_or_create(
        name="bürgt für person",
        name_reverse="person wird gebürgt von",
    )[0]
    #person_vouchers_for_person_out.subj_class.clear()
    person_vouchers_for_person_out.subj_class.add(ContentType.objects.get(model=PersonVouchersForPerson.__name__))
    #person_vouchers_for_person_out.obj_class.clear()
    person_vouchers_for_person_out.obj_class.add(ContentType.objects.get(model=Person.__name__))

    function_is_located_at_institution_in = Property.objects.get_or_create(
        name="function ist an",
        name_reverse="hat Funktion function",
    )[0]
    #function_is_located_at_institution_in.subj_class.clear()
    function_is_located_at_institution_in.subj_class.add(ContentType.objects.get(model=Function.__name__))
    #function_is_located_at_institution_in.obj_class.clear()
    function_is_located_at_institution_in.obj_class.add(ContentType.objects.get(model=FunctionIsLocatedAtInstitution.__name__))
    function_is_located_at_institution_out = Property.objects.get_or_create(
        name="ist an institution",
        name_reverse="institution hat Funktion",
    )[0]
    #function_is_located_at_institution_out.subj_class.clear()
    function_is_located_at_institution_out.subj_class.add(ContentType.objects.get(model=FunctionIsLocatedAtInstitution.__name__))
    #function_is_located_at_institution_out.obj_class.clear()
    function_is_located_at_institution_out.obj_class.add(ContentType.objects.get(model=Institution.__name__))
    function_is_located_at_institution_out = Property.objects.get_or_create(
        name="ist an court",
        name_reverse="court hat Funktion",
    )[0]
    #function_is_located_at_institution_out.subj_class.clear()
    function_is_located_at_institution_out.subj_class.add(ContentType.objects.get(model=FunctionIsLocatedAtInstitution.__name__))
    #function_is_located_at_institution_out.obj_class.clear()
    function_is_located_at_institution_out.obj_class.add(ContentType.objects.get(model=Court.__name__))

    function_is_hold_by_in = Property.objects.get_or_create(
        name="function wird bekleidet von",
        name_reverse="hat Funktion inne function",
    )[0]
    #function_is_hold_by_in.subj_class.clear()
    function_is_hold_by_in.subj_class.add(ContentType.objects.get(model=Function.__name__))
    #function_is_hold_by_in.obj_class.clear()
    function_is_hold_by_in.obj_class.add(ContentType.objects.get(model=FunctionIsHoldBy.__name__))
    function_is_hold_by_out = Property.objects.get_or_create(
        name="wird bekleidet von person",
        name_reverse="person hat Funktion inne",
    )[0]
    #function_is_hold_by_out.subj_class.clear()
    function_is_hold_by_out.subj_class.add(ContentType.objects.get(model=FunctionIsHoldBy.__name__))
    #function_is_hold_by_out.obj_class.clear()
    function_is_hold_by_out.obj_class.add(ContentType.objects.get(model=Person.__name__))

    function_ging_hervor_aus_in = Property.objects.get_or_create(
        name="function ging hervor aus",
        name_reverse="war Vorgänger von function",
    )[0]
    #function_ging_hervor_aus_in.subj_class.clear()
    function_ging_hervor_aus_in.subj_class.add(ContentType.objects.get(model=Function.__name__))
    #function_ging_hervor_aus_in.obj_class.clear()
    function_ging_hervor_aus_in.obj_class.add(ContentType.objects.get(model=FunctionGingHervorAus.__name__))
    function_ging_hervor_aus_out = Property.objects.get_or_create(
        name="ging hervor aus function",
        name_reverse="function war Vorgänger von",
    )[0]
    #function_ging_hervor_aus_out.subj_class.clear()
    function_ging_hervor_aus_out.subj_class.add(ContentType.objects.get(model=FunctionGingHervorAus.__name__))
    #function_ging_hervor_aus_out.obj_class.clear()
    function_ging_hervor_aus_out.obj_class.add(ContentType.objects.get(model=Function.__name__))

    function_is_subordinary_of_in = Property.objects.get_or_create(
        name="function ist untergeordnet",
        name_reverse="hat untergeordnete Funktion function",
    )[0]
    #function_is_subordinary_of_in.subj_class.clear()
    function_is_subordinary_of_in.subj_class.add(ContentType.objects.get(model=Function.__name__))
    #function_is_subordinary_of_in.obj_class.clear()
    function_is_subordinary_of_in.obj_class.add(ContentType.objects.get(model=FunctionIsSubordinaryOf.__name__))
    function_is_subordinary_of_out = Property.objects.get_or_create(
        name="ist untergeordnet function",
        name_reverse="function hat untergeordnete Funktion",
    )[0]
    #function_is_subordinary_of_out.subj_class.clear()
    function_is_subordinary_of_out.subj_class.add(ContentType.objects.get(model=FunctionIsSubordinaryOf.__name__))
    #function_is_subordinary_of_out.obj_class.clear()
    function_is_subordinary_of_out.obj_class.add(ContentType.objects.get(model=Function.__name__))

    function_was_located_in_in = Property.objects.get_or_create(
        name="function ausgeübt in",
        name_reverse="war Ausübungsort von function",
    )[0]
    #function_was_located_in_in.subj_class.clear()
    function_was_located_in_in.subj_class.add(ContentType.objects.get(model=Function.__name__))
    #function_was_located_in_in.obj_class.clear()
    function_was_located_in_in.obj_class.add(ContentType.objects.get(model=FunctionWasLocatedIn.__name__))
    function_was_located_in_out = Property.objects.get_or_create(
        name="ausgeübt in place",
        name_reverse="place war Ausübungsort von",
    )[0]
    #function_was_located_in_out.subj_class.clear()
    function_was_located_in_out.subj_class.add(ContentType.objects.get(model=FunctionWasLocatedIn.__name__))
    #function_was_located_in_out.obj_class.clear()
    function_was_located_in_out.obj_class.add(ContentType.objects.get(model=Place.__name__))

    place_located_in_place_in = Property.objects.get_or_create(
        name="place Teil von",
        name_reverse="hat Teil place",
    )[0]
    #place_located_in_place_in.subj_class.clear()
    place_located_in_place_in.subj_class.add(ContentType.objects.get(model=Place.__name__))
    #place_located_in_place_in.obj_class.clear()
    place_located_in_place_in.obj_class.add(ContentType.objects.get(model=PlaceLocatedInPlace.__name__))
    place_located_in_place_out = Property.objects.get_or_create(
        name="Teil von place",
        name_reverse="place hat Teil",
    )[0]
    #place_located_in_place_out.subj_class.clear()
    place_located_in_place_out.subj_class.add(ContentType.objects.get(model=PlaceLocatedInPlace.__name__))
    #place_located_in_place_out.obj_class.clear()
    place_located_in_place_out.obj_class.add(ContentType.objects.get(model=Place.__name__))

    institution_paid_salary_in = Property.objects.get_or_create(
        name="institution zahlte aus",
        name_reverse="wurde ausbezahlt von institution",
    )[0]
    #institution_paid_salary_in.subj_class.clear()
    institution_paid_salary_in.subj_class.add(ContentType.objects.get(model=Institution.__name__))
    #institution_paid_salary_in.obj_class.clear()
    institution_paid_salary_in.obj_class.add(ContentType.objects.get(model=InstitutionPaidSalary.__name__))
    institution_paid_salary_out = Property.objects.get_or_create(
        name="zahlte aus salary",
        name_reverse="salary wurde ausbezahlt von",
    )[0]
    #institution_paid_salary_out.subj_class.clear()
    institution_paid_salary_out.subj_class.add(ContentType.objects.get(model=InstitutionPaidSalary.__name__))
    #institution_paid_salary_out.obj_class.clear()
    institution_paid_salary_out.obj_class.add(ContentType.objects.get(model=Salary.__name__))

    institutionlocated_in_in = Property.objects.get_or_create(
        name="institution ist gelegen in",
        name_reverse="inkludiert institution",
    )[0]
    #institutionlocated_in_in.subj_class.clear()
    institutionlocated_in_in.subj_class.add(ContentType.objects.get(model=Institution.__name__))
    #institutionlocated_in_in.obj_class.clear()
    institutionlocated_in_in.obj_class.add(ContentType.objects.get(model=InstitutionlocatedIn.__name__))
    institutionlocated_in_out = Property.objects.get_or_create(
        name="ist gelegen in place",
        name_reverse="place inkludiert",
    )[0]
    #institutionlocated_in_out.subj_class.clear()
    institutionlocated_in_out.subj_class.add(ContentType.objects.get(model=InstitutionlocatedIn.__name__))
    #institutionlocated_in_out.obj_class.clear()
    institutionlocated_in_out.obj_class.add(ContentType.objects.get(model=Place.__name__))

    institution_given_in_mortage_to_in = Property.objects.get_or_create(
        name="institution ist verpfändet an",
        name_reverse="hat als Pfand institution",
    )[0]
    #institution_given_in_mortage_to_in.subj_class.clear()
    institution_given_in_mortage_to_in.subj_class.add(ContentType.objects.get(model=Institution.__name__))
    #institution_given_in_mortage_to_in.obj_class.clear()
    institution_given_in_mortage_to_in.obj_class.add(ContentType.objects.get(model=InstitutionGivenInMortageTo.__name__))
    institution_given_in_mortage_to_out = Property.objects.get_or_create(
        name="ist verpfändet an person",
        name_reverse="person hat als Pfand",
    )[0]
    #institution_given_in_mortage_to_out.subj_class.clear()
    institution_given_in_mortage_to_out.subj_class.add(ContentType.objects.get(model=InstitutionGivenInMortageTo.__name__))
    #institution_given_in_mortage_to_out.obj_class.clear()
    institution_given_in_mortage_to_out.obj_class.add(ContentType.objects.get(model=Person.__name__))

    institution_belongs_to_institution_in = Property.objects.get_or_create(
        name="institution gehört zu",
        name_reverse="zuständig für institution",
    )[0]
    #institution_belongs_to_institution_in.subj_class.clear()
    institution_belongs_to_institution_in.subj_class.add(ContentType.objects.get(model=Institution.__name__))
    #institution_belongs_to_institution_in.obj_class.clear()
    institution_belongs_to_institution_in.obj_class.add(ContentType.objects.get(model=InstitutionBelongsToInstitution.__name__))
    institution_belongs_to_institution_out = Property.objects.get_or_create(
        name="gehört zu institution",
        name_reverse="institution zuständig für",
    )[0]
    #institution_belongs_to_institution_out.subj_class.clear()
    institution_belongs_to_institution_out.subj_class.add(ContentType.objects.get(model=InstitutionBelongsToInstitution.__name__))
    #institution_belongs_to_institution_out.obj_class.clear()
    institution_belongs_to_institution_out.obj_class.add(ContentType.objects.get(model=Institution.__name__))

    institution_orders_salary_in = Property.objects.get_or_create(
        name="institution weist an",
        name_reverse="auf Anweisung von institution",
    )[0]
    #institution_orders_salary_in.subj_class.clear()
    institution_orders_salary_in.subj_class.add(ContentType.objects.get(model=Institution.__name__))
    #institution_orders_salary_in.obj_class.clear()
    institution_orders_salary_in.obj_class.add(ContentType.objects.get(model=InstitutionOrdersSalary.__name__))
    institution_orders_salary_out = Property.objects.get_or_create(
        name="weist an salary",
        name_reverse="salary auf Anweisung von",
    )[0]
    #institution_orders_salary_out.subj_class.clear()
    institution_orders_salary_out.subj_class.add(ContentType.objects.get(model=InstitutionOrdersSalary.__name__))
    #institution_orders_salary_out.obj_class.clear()
    institution_orders_salary_out.obj_class.add(ContentType.objects.get(model=Salary.__name__))

    event_took_place_at_in = Property.objects.get_or_create(
        name="event fand statt in",
        name_reverse="inkludierte event",
    )[0]
    #event_took_place_at_in.subj_class.clear()
    event_took_place_at_in.subj_class.add(ContentType.objects.get(model=Event.__name__))
    #event_took_place_at_in.obj_class.clear()
    event_took_place_at_in.obj_class.add(ContentType.objects.get(model=EventTookPlaceAt.__name__))
    event_took_place_at_out = Property.objects.get_or_create(
        name="fand statt in place",
        name_reverse="place inkludierte",
    )[0]
    #event_took_place_at_out.subj_class.clear()
    event_took_place_at_out.subj_class.add(ContentType.objects.get(model=EventTookPlaceAt.__name__))
    #event_took_place_at_out.obj_class.clear()
    event_took_place_at_out.obj_class.add(ContentType.objects.get(model=Place.__name__))

    salary_paid_to_in = Property.objects.get_or_create(
        name="salary wurde ausbezahlt an",
        name_reverse="erhielt salary",
    )[0]
    #salary_paid_to_in.subj_class.clear()
    salary_paid_to_in.subj_class.add(ContentType.objects.get(model=Salary.__name__))
    #salary_paid_to_in.obj_class.clear()
    salary_paid_to_in.obj_class.add(ContentType.objects.get(model=SalaryPaidTo.__name__))
    salary_paid_to_out = Property.objects.get_or_create(
        name="wurde ausbezahlt an function",
        name_reverse="function erhielt",
    )[0]
    #salary_paid_to_out.subj_class.clear()
    salary_paid_to_out.subj_class.add(ContentType.objects.get(model=SalaryPaidTo.__name__))
    #salary_paid_to_out.obj_class.clear()
    salary_paid_to_out.obj_class.add(ContentType.objects.get(model=Function.__name__))

    salary_ordered_by_in = Property.objects.get_or_create(
        name="salary auf Anweisung von",
        name_reverse="wies an salary",
    )[0]
    #salary_ordered_by_in.subj_class.clear()
    salary_ordered_by_in.subj_class.add(ContentType.objects.get(model=Salary.__name__))
    #salary_ordered_by_in.obj_class.clear()
    salary_ordered_by_in.obj_class.add(ContentType.objects.get(model=SalaryOrderedBy.__name__))
    salary_ordered_by_out = Property.objects.get_or_create(
        name="auf Anweisung von function",
        name_reverse="function wies an",
    )[0]
    #salary_ordered_by_out.subj_class.clear()
    salary_ordered_by_out.subj_class.add(ContentType.objects.get(model=SalaryOrderedBy.__name__))
    #salary_ordered_by_out.obj_class.clear()
    salary_ordered_by_out.obj_class.add(ContentType.objects.get(model=Function.__name__))
